commands:
  job-collector:
    description: |
      "Collect data from this job and report to SumoLogic. Note: MUST BE LAST COMMAND IN JOB."
    parameters:
      circle-token:
        default: CIRCLE_TOKEN
        description: |
          "The environment variable name containing your CircleCI Personal API token.
          The API token is used to fetch additional analytics not present within the container.
          Generate yours here: https://circleci.com/account/api"
        type: env_var_name
      http-source:
        default: HTTP_SOURCE
        description: Enter the HTTP Source endpoint generated by the Sumologic setup
          wizard.
        type: env_var_name
    steps:
    - jq/install
    - run:
        command: |
          # Fetch job data from API
          WF_PAYLOAD=$(curl https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/jobs?circle-token=$<< parameters.circle-token >>)
          # Pre-Process data here if needed.
          WORKFLOWLENGTH=$(echo "$WF_PAYLOAD" | jq length)
          echo "WF length $WORKFLOWLENGTH"
          #fetch job data for only this job.
          WF_LOOP="0"
          echo "Searching for job data"
          while [ "$WF_LOOP" -lt "$WORKFLOWLENGTH" ];
          do
            echo "loop $WF_LOOP"
            JOBDATA=$(echo "$WF_PAYLOAD" | jq ".[][$WF_LOOP]")
            echo
            echo "job data: "
            echo "$JOBDATA"
            echo
            echo "Checking Job Number"
            JOBNUMBER=$(echo "$JOBDATA" | jq '.job_number')
            echo
            echo "job number $JOBNUMBER"
            echo "internal job number: $CIRCLE_BUILD_NUM"
            echo "Checking if equal"
            if [ "$JOBNUMBER" -eq "$CIRCLE_BUILD_NUM" ];
            then
              echo "this is the correct job"
              break
            fi
            echo "Trying next job in workflow. Data was not in $WF_LOOP"
            WF_LOOP=$[$WF_LOOP +1]
          done
          # Write data to /tmp/sumologic-logs/job-colloector.json
          mkdir -p /tmp/sumologic-logs/
          if [ -z $JOBDATA ];
          then
            echo "$JOBDATA" > /tmp/sumologic-logs/job-colloector.json
            # Send data to SumoLogic
            curl -v -X POST -T /tmp/sumologic-logs/job-colloector.json $<< parameters.http-source >>
          else
            echo "Error: Job data was not found. Please consider opening an issue https://circleci.com/gh/CircleCI-Public/sumologic-orb"
          fi
        name: SumoLogic Job Collector
        when: always
  submit:
    description: |
      "Collect data from this job and report to SumoLogic. Note: MUST BE LAST COMMAND IN JOB."
    parameters:
      http-source:
        default: HTTP_SOURCE
        description: Enter the HTTP Source endpoint generated by the Sumologic setup
          wizard.
        type: env_var_name
      path:
        description: absolute or relative path to the logfile you wish to upload.
        type: string
    steps:
    - run:
        command: |
          # Send data to SumoLogic
          curl -v -X POST -T << parameters.path >> $<< parameters.http-source >>
        name: SumoLogic Send Log
        when: always
description: |
  "Report CircleCI job analytics to your SumoLogic dashboard. Website: sumologic.com Repo: https://github.com/CircleCI-Public/sumologic-orb"
examples:
  example:
    description: |
      Sample example description. # What will this example document? # Descriptions should be short, simple, and clear.
    usage:
      jobs:
        build:
          machine: true
          steps:
          - foo/hello:
              username: Anna
      orbs:
        foo: bar/foo@1.2.3
      version: 2.1
executors:
  default:
    description: |
      Default reporting environment for Sumologic. This is a small node based Docker image with a low resource class. Designed to load fast and use few credits.
    docker:
    - image: cimg/node
    resource_class: small
jobs:
  workflow-collector:
    description: |
      "Add this job to any Workflow, it will run until the end of"
    executor: default
    parameters:
      http-source:
        default: HTTP_SOURCE
        description: Enter the HTTP Source endpoint generated by the Sumologic setup
          wizard.
        type: env_var_name
    steps:
    - jq/install
    - run:
        command: |
          DATA_URL="https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/jobs?circle-token=$CIRCLE_TOKEN"
          echo $(curl "$DATA_URL")
          WF_LENGTH=$(curl "$DATA_URL" | jq length)
          echo "Length: WF_LENGTH"
          if [ "$WF_LENGTH" -lt 2 ];
          # Exit if no other jobs in the Workflow.
          then
            echo "Only a single job has been found in the workflow, indicating this reporter is the only job in the pipeline."
            echo "Please add other jobs to the Workflow you wish to collect data on to send to Sumologic"
            exit 1
          fi
          WF_FINISHED=false
          # Check the status of all jobs in the workflow that are not this job and wait until they have all finished.
          while [ "$WF_FINISHED" = false ]
          do
            echo "Waiting for other jobs to finish..."
            # for each job in the workflow fetch the status.
            # the WF_FINISHED will be assumed true unless one of the jobs in the Workflow is still running
            # the flag will then be set back to false.
            WF_FINISHED=true
            i="0"
            while [ $i -lt "$WF_LENGTH" ]
            do
              echo "looping: $i"
              JOB_DATA=$(curl "$DATA_URL" | jq ".[][$i]")
              JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
              JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
              echo "Job number: $JOB_NUMBER"
              # check Job number and set WF_FINISHED value
              # Only check the job if it is not this current job
              if [ ! "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
              then
                echo "Checking the status of $JOB_NUMBER"
                echo "status $JOB_STATUS"
                # check if the job is complete.
                if [ ! "$JOB_STATUS" = "running" ];
                then
                  echo "Job $CIRCLE_JOB $JOB_NUMBER is complete"
                fi
              fi
              i=$($i+1)
            done
          done
orbs:
  jq: circleci/jq@1.9.0
version: 2.1

