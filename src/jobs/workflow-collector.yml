description: >
  "Add this job to any Workflow, it will run until the end of"
parameters:
  workflow-collector:
    type: env_var_name
    default: "WORKFLOW_HTTP_SOURCE"
    description: "Enter the HTTP Source endpoint generated by the Sumologic setup wizard for Workflows."
  job-collector:
    type: env_var_name
    default: "JOB_HTTP_SOURCE"
    description: "Enter the HTTP Source endpoint generated by the Sumologic setup wizard for Workflows."
executor: default
steps:
  - jq/install
  - run:
      name: Workflow Collector
      command: |
        ###############
        # Begin Collecting
        ###############
        DATA_URL="https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/jobs?circle-token=$CIRCLE_TOKEN"
        WF_DATA=$(curl -s "$DATA_URL" | jq '.items')
        WF_LENGTH=$(echo "$WF_DATA" | jq length)
        # GET URL PATH DATA
        VCS_SHORT=$(echo $CIRCLE_BUILD_URL | cut -d"/" -f4)
        # Assume the WF is currently running
        WF_FINISHED=false
        echo "Jobs in Workflow: $WF_LENGTH"
        echo
        # Exit if no other jobs in the Workflow.
        if [ "$WF_LENGTH" -lt 2 ];
        then
          echo "Only a single job has been found in the workflow, indicating this reporter is the only job in the pipeline."
          echo "Please add other jobs to the Workflow you wish to collect data on to send to Sumologic"
          exit 1
        fi
        #####################
        ## START MAIN LOOP ##
        #####################
        # Check the status of all jobs in the workflow that are not this job and wait until they have all finished.
        while [ "$WF_FINISHED" = false ]
        do
          WF_DATA=$(curl -s "$DATA_URL" | jq '.items')
          #debug
          echo "DEBUG"
          echo $WF_DATA
          echo "Waiting for other jobs to finish..."
          #####
          # Send Workflow Data to SumoLogic
          #####
          mkdir -p /tmp/sumologic-logs/
          WF_SL_PAYLOAD=$(curl -s "$DATA_URL" | jq '.')
          echo $WF_SL_PAYLOAD > /tmp/sumologic-logs/workflow-collector.json
          curl -s -X POST -T /tmp/sumologic-logs/workflow-collector.json $<< parameters.workflow-collector >>
          # for each job in the workflow fetch the status.
          # the WF_FINISHED will be assumed true unless one of the jobs in the Workflow is still running
          # the flag will then be set back to false.
          WF_FINISHED=true
          i="0"
          ################
          ### JOB LOOP ###
          ################
          while [ $i -lt "$WF_LENGTH" ]
          do
            echo "looping: $i"
            # fetch the job info
            JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
            #debug
            echo "DEBUG"
            echo $JOB_DATA
            JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
            JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
            JOB_NAME=$(echo "$JOB_DATA" | jq ".name")
            # Only check the job if it is not this current job
            if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
            then
              echo "This is the reporter job. Skipping"
            else
              # If this job is NOT the current job, check the status
              echo "JOB: $JOB_NAME"
              echo "JOB NUM: $JOB_NUMBER"
              echo "STATUS: $JOB_STATUS"
              #####
              # Send Job Data to SumoLogic
              #####
              mkdir -p /tmp/sumologic-logs/
              ###
              # Process Job api 1.1 Data
              ###
              esac
              echo
              echo JOB DATA URL
              echo "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER?circle-token="
              # JOB_DATA_RAW=$(curl -s "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER?circle-token=$CIRCLE_TOKEN")
              echo $JOB_DATA_RAW > /tmp/sumologic-logs/job-collector.json
              curl -s -X POST -T /tmp/sumologic-logs/job-collector.json $<< parameters.job-collector >>
              ###
              if [ "$JOB_STATUS" != '"running"' ];
              then
                echo "Job $CIRCLE_JOB $JOB_NUMBER is complete - $JOB_STATUS"
              else
                # If it is still running, then mark WF_FINISHED as false.
                WF_FINISHED=false
                echo "Setting status of WF_FINISHED to false"
              fi
            fi
            echo "rerunning loop"
            i="$((i+1))"
            echo "increment loop to $i"
            echo " ---------- "
            echo
          done
          echo "Waiting 10 seconds"
          sleep 10
        done
        echo
        ################
        # WF COMPLETE  #
        ################
        echo
        echo "-------------------------------"
        echo "All jobs in Workflow complete."
        echo "Sending final report."
        echo "-------------------------------"
        echo
        echo
        ########################################
        # Send end-of-workflow data to Sumologic
        ########################################
        WF_SL_PAYLOAD=$(curl -s "$DATA_URL" | jq '.')
        # debug
        echo "debug"
        echo "SENDING FINAL WORKFLOW DATA"
        echo $WF_SL_PAYLOAD
        echo $WF_SL_PAYLOAD > /tmp/sumologic-logs/workflow-collector.json
        curl -s -X POST -T /tmp/sumologic-logs/workflow-collector.json $<< parameters.workflow-collector >>
        ########################################
        # Send end-of-workflow jobs data to Sumologic
        ########################################
        echo "SENDING FINAL JOB INFORMATION"
        i=0
        while [ $i -lt "$WF_LENGTH" ]
          do
            echo "looping: $i"
            # fetch the job info
            JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
            JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
            JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
            JOB_NAME=$(echo "$JOB_DATA" | jq ".name")
            # Only check the job if it is not this current job
            if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
            then
              echo "This is the reporter job. Skipping"
            else
              # If this job is NOT the current job, check the status
              echo "JOB: $JOB_NAME"
              echo "JOB NUM: $JOB_NUMBER"
              echo "STATUS: $JOB_STATUS"
              #####
              # Send Job Data to SumoLogic
              #####
              mkdir -p /tmp/sumologic-logs/
              ###
              # Process Job api 1.1 Data
              ###
              JOB_DATA_RAW=$(curl -s "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER?circle-token=$CIRCLE_TOKEN")
              # debug
              echo debug
              echo "---"
              echo
              echo "SHOW JOB DATA"
              echo
              echo "---"
              echo $JOB_DATA_RAW
              echo $JOB_DATA_RAW > /tmp/sumologic-logs/job-collector.json
              curl -s -X POST -T /tmp/sumologic-logs/job-collector.json $<< parameters.job-collector >>
              ###
            fi
            echo "rerunning loop"
            i="$((i+1))"
            echo "increment loop to $i"
            echo " ---------- "
            echo
          done
